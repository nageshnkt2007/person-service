package com.service.person.services.impl;

import com.service.person.dto.PersonDto;
import com.service.person.dto.PersonsDto;
import com.service.person.exception.BadRequestException;
import com.service.person.services.IPerson;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@SpringBootTest()
class PersonServiceTest {
    private static List<PersonDto> personList = new ArrayList<>();

    @Autowired
    private IPerson personService;

    @BeforeAll
    static void setUp() {
        personList = fetchPersonList();
    }

    private static List<PersonDto> fetchPersonList() {
        List<PersonDto> persons = new ArrayList<>();
        persons.add(createPerson("xyzabc123", "john", "doe", "yellow"));
        persons.add(createPerson("id11111", "oscar", "fernandes", "blue"));
        persons.add(createPerson("111111", "frank", "lampard", "blue"));
        persons.add(createPerson("111112", "steven", "gerrard", "red"));
        return persons;
    }

    private static PersonDto createPerson(String id, String first_name, String last_name, String favourite_colour) {
        PersonDto p = new PersonDto();
        p.setFirst_name(first_name);
        p.setLast_name(last_name);
        p.setFavourite_colour(favourite_colour);
        return p;
    }

    @Test
    @DisplayName("create person test")
    void createPersons() {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        Assertions.assertTrue(savedPersons.size() == savedPersons.size(), "Asserting that all records were saved.");
        Assertions.assertTrue(Objects.nonNull(savedPersons.get(0).getId()), "Asserting ID was generated by DB");
        personList = savedPersons;
    }

    @Test
    @DisplayName("update person test")
    void updatePersons() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        String newFavouriteColor = "";
        savedPersons.get(0).setFavourite_colour(newFavouriteColor);
        List<PersonDto> updatedPersons = personService.updatePersons(savedPersons);
        Assertions.assertTrue(updatedPersons.get(0).getId().equals(savedPersons.get(0).getId()), "Asserting that same Object was persisted in DB");
        Assertions.assertTrue(updatedPersons.get(0).getFavourite_colour().equals(newFavouriteColor), "Asserting updated color is saved in DB");
    }

    @Test
    @DisplayName("update person test throws null id")
    void updatePersonsThrows() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        savedPersons.add(createPerson(null,"","",""));
        Assertions.assertThrows(BadRequestException.class,() -> personService.updatePersons(savedPersons));
    }

    @Test
    @DisplayName("update person test throws for validation of ID")
    void updatePersonsThrowsForWrongId() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        savedPersons.add(createPerson("abcd","","",""));
        Assertions.assertThrows(BadRequestException.class,() -> personService.updatePersons(savedPersons));
    }

    @Test
    @DisplayName("delete person test")
    void deletePersons() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        List<PersonDto> deletedPersons = personService.deletePersons(savedPersons);
        Assertions.assertTrue(savedPersons.size()==deletedPersons.size(),"Asserting that list provided was successfully deleted");
    }

    @Test
    @DisplayName("delete person test throws null id")
    void deletePersonsThrows() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        savedPersons.add(createPerson(null,"","",""));
        Assertions.assertThrows(BadRequestException.class,() -> personService.deletePersons(savedPersons));
    }

    @Test
    @DisplayName("delete person test throws for validation of ID")
    void deletePersonsThrowsNullList() throws BadRequestException {
        List<PersonDto> savedPersons = personService.createPersons(personList);
        Assertions.assertThrows(BadRequestException.class,() -> personService.deletePersons(null));
    }

    @Test
    @DisplayName("get all persons non null response")
    void getAllPersons(){
     PersonsDto personDtoList = personService.getAllPersons(0);
     Assertions.assertTrue(Objects.nonNull(personDtoList),"Assert that getAll response is non null");
    }

    @Test
    @DisplayName("get all persons pagination test")
    void getAllPersonsPagination(){
        List<PersonDto> savedPersons = personService.createPersons(personList);
        PersonsDto personDtoList = personService.getAllPersons(0);
        Assertions.assertTrue(Objects.nonNull(personDtoList.getPerson()),"Assert that the person list returned is non null");
        Assertions.assertTrue(Objects.nonNull(personDtoList.getPerson().size()>0),"Assert that data is present in list");
        Assertions.assertTrue(personDtoList.getTotalPages()>0,"Assert that at least one page is returned for performing pagination");
    }

    @Test
    @DisplayName("get all persons pagination test")
    void getAllPersonsPaginationNull(){
        List<PersonDto> savedPersons = personService.createPersons(personList);
        PersonsDto personDtoList = personService.getAllPersons(null);
        Assertions.assertTrue(Objects.nonNull(personDtoList.getPerson()),"Assert that the person list returned is non null");
        Assertions.assertTrue(Objects.nonNull(personDtoList.getPerson().size()>0),"Assert that data is present in list");
        Assertions.assertTrue(personDtoList.getTotalPages()>0,"Assert that at least one page is returned for performing pagination");
    }

}
